{"ast":null,"code":"// src/features/cart/cartSlice.js\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  items: [],\n  // Array to hold items added to the cart\n  itemCount: 0\n};\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState,\n  reducers: {\n    addToCart: (state, action) => {\n      state.items.push(action.payload); // Add new item directly to the items array\n      state.itemCount += 1; // Increment item count\n    },\n    removeFromCart: (state, action) => {\n      const {\n        id,\n        forceZeroQuantity\n      } = action.payload; // Destructure id and forceZeroQuantity from the payload\n      if (forceZeroQuantity) {\n        state.items = state.items.filter(item => item.id !== id); // Remove all items with the given id\n      } else {\n        const index = state.items.findIndex(item => item.id === id);\n        if (index !== -1) {\n          state.items.splice(index, 1); // Remove one instance of the item with the given id\n        }\n      }\n      state.itemCount -= 1; // Decrement item count\n      if (state.itemCount < 0) {\n        state.itemCount = 0; // Prevent negative item count\n      }\n    },\n    resetCart: state => {\n      state.items = [];\n      state.itemCount = 0; // Reset the cart and item count\n    },\n    decreaseQuantity: (state, action) => {\n      const index = state.items.findIndex(item => item.id === action.payload.id);\n      if (index !== -1) {\n        state.items.splice(index, 1); // Remove one instance of the item with the given id\n        state.itemCount -= 1; // Decrement item count\n        if (state.itemCount < 0) {\n          state.itemCount = 0; // Prevent negative item count\n        }\n      }\n    }\n  }\n});\n\n// Export actions\nexport const {\n  addToCart,\n  removeFromCart,\n  resetCart,\n  decreaseQuantity\n} = cartSlice.actions;\n\n// Export the reducer\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","items","itemCount","cartSlice","name","reducers","addToCart","state","action","push","payload","removeFromCart","id","forceZeroQuantity","filter","item","index","findIndex","splice","resetCart","decreaseQuantity","actions","reducer"],"sources":["C:/Development/2afa701e-016e-4a7b-8361-9c7702a04020/src/store/slices/cartSlice.js"],"sourcesContent":["// src/features/cart/cartSlice.js\r\nimport { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  items: [], // Array to hold items added to the cart\r\n  itemCount: 0,\r\n};\r\n\r\nconst cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState,\r\n  reducers: {\r\n    addToCart: (state, action) => {\r\n      state.items.push(action.payload); // Add new item directly to the items array\r\n      state.itemCount += 1; // Increment item count\r\n    },\r\n    removeFromCart: (state, action) => {\r\n      const { id, forceZeroQuantity } = action.payload; // Destructure id and forceZeroQuantity from the payload\r\n      if (forceZeroQuantity) {\r\n        state.items = state.items.filter(item => item.id !== id); // Remove all items with the given id\r\n      } else {\r\n        const index = state.items.findIndex(item => item.id === id);\r\n        if (index !== -1) {\r\n          state.items.splice(index, 1); // Remove one instance of the item with the given id\r\n        }\r\n      }\r\n      state.itemCount -= 1; // Decrement item count\r\n      if (state.itemCount < 0) {\r\n        state.itemCount = 0; // Prevent negative item count\r\n      }\r\n    },\r\n    resetCart: (state) => {\r\n      state.items = [];\r\n      state.itemCount = 0; // Reset the cart and item count\r\n    },\r\n    decreaseQuantity: (state, action) => {\r\n      const index = state.items.findIndex(item => item.id === action.payload.id);\r\n      if (index !== -1) {\r\n        state.items.splice(index, 1); // Remove one instance of the item with the given id\r\n        state.itemCount -= 1; // Decrement item count\r\n        if (state.itemCount < 0) {\r\n          state.itemCount = 0; // Prevent negative item count\r\n        }\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\n// Export actions\r\nexport const { addToCart, removeFromCart, resetCart, decreaseQuantity } = cartSlice.actions;\r\n\r\n// Export the reducer\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA;AACA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EAAE;EACXC,SAAS,EAAE;AACb,CAAC;AAED,MAAMC,SAAS,GAAGJ,WAAW,CAAC;EAC5BK,IAAI,EAAE,MAAM;EACZJ,YAAY;EACZK,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5BD,KAAK,CAACN,KAAK,CAACQ,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,CAAC,CAAC;MAClCH,KAAK,CAACL,SAAS,IAAI,CAAC,CAAC,CAAC;IACxB,CAAC;IACDS,cAAc,EAAEA,CAACJ,KAAK,EAAEC,MAAM,KAAK;MACjC,MAAM;QAAEI,EAAE;QAAEC;MAAkB,CAAC,GAAGL,MAAM,CAACE,OAAO,CAAC,CAAC;MAClD,IAAIG,iBAAiB,EAAE;QACrBN,KAAK,CAACN,KAAK,GAAGM,KAAK,CAACN,KAAK,CAACa,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC,CAAC,CAAC;MAC5D,CAAC,MAAM;QACL,MAAMI,KAAK,GAAGT,KAAK,CAACN,KAAK,CAACgB,SAAS,CAACF,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;QAC3D,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;UAChBT,KAAK,CAACN,KAAK,CAACiB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QAChC;MACF;MACAT,KAAK,CAACL,SAAS,IAAI,CAAC,CAAC,CAAC;MACtB,IAAIK,KAAK,CAACL,SAAS,GAAG,CAAC,EAAE;QACvBK,KAAK,CAACL,SAAS,GAAG,CAAC,CAAC,CAAC;MACvB;IACF,CAAC;IACDiB,SAAS,EAAGZ,KAAK,IAAK;MACpBA,KAAK,CAACN,KAAK,GAAG,EAAE;MAChBM,KAAK,CAACL,SAAS,GAAG,CAAC,CAAC,CAAC;IACvB,CAAC;IACDkB,gBAAgB,EAAEA,CAACb,KAAK,EAAEC,MAAM,KAAK;MACnC,MAAMQ,KAAK,GAAGT,KAAK,CAACN,KAAK,CAACgB,SAAS,CAACF,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKJ,MAAM,CAACE,OAAO,CAACE,EAAE,CAAC;MAC1E,IAAII,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBT,KAAK,CAACN,KAAK,CAACiB,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QAC9BT,KAAK,CAACL,SAAS,IAAI,CAAC,CAAC,CAAC;QACtB,IAAIK,KAAK,CAACL,SAAS,GAAG,CAAC,EAAE;UACvBK,KAAK,CAACL,SAAS,GAAG,CAAC,CAAC,CAAC;QACvB;MACF;IACF;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEI,SAAS;EAAEK,cAAc;EAAEQ,SAAS;EAAEC;AAAiB,CAAC,GAAGjB,SAAS,CAACkB,OAAO;;AAE3F;AACA,eAAelB,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}