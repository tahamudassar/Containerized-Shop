{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\2afa701e-016e-4a7b-8361-9c7702a04020\\\\src\\\\MainForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Form() {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    reenter_password: ''\n  });\n  const [response, setResponse] = useState(null); // Store server response status or messages\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      if (formData.password !== formData.reenter_password) {\n        console.log('Passwords do not match');\n        setResponse('Passwords do not match');\n        return;\n      } else if (formData.password.length < 8) {\n        setResponse('Password must be at least 8 characters long');\n        return;\n      }\n\n      // Remove reenter_password key from formData before sending the data\n      const {\n        reenter_password,\n        ...requestData\n      } = formData;\n      console.log(requestData);\n      const response = await fetch('http://localhost:8000/api/register/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestData)\n      });\n      console.log(response);\n      if (response.status === 201) {\n        const data = await response.json(); // Parse the server response if needed\n        setResponse('Registration successful!');\n        console.log('Success:', data);\n      } else {\n        const errorData = await response.json();\n        setResponse(`Failed: ${errorData.message || 'Unknown error'}`);\n        console.log('Error:', errorData);\n      }\n    } catch (error) {\n      setResponse('Failed: Server error');\n      console.error('Error:', error);\n    }\n  };\n  const handleResrtPwdRedirect = () => {\n    useHistory.push('./Resetpassword');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [Object.keys(formData).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: key,\n          children: key.charAt(0).toUpperCase() + key.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: key,\n          name: key,\n          type: key.includes('password') ? 'password' : 'text' // Use password type for password fields\n          ,\n          placeholder: key.charAt(0).toUpperCase() + key.slice(1),\n          value: formData[key],\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 26\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleResrtPwdRedirect,\n      children: \"Forgot password?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n_s(Form, \"lHy6Ah42kAKvqR24pkI+ikcHM78=\");\n_c = Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","useHistory","jsxDEV","_jsxDEV","Form","_s","formData","setFormData","username","email","password","reenter_password","response","setResponse","handleChange","event","name","value","target","prevState","handleSubmit","preventDefault","console","log","length","requestData","fetch","method","headers","body","JSON","stringify","status","data","json","errorData","message","error","handleResrtPwdRedirect","push","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Object","keys","map","key","htmlFor","charAt","toUpperCase","slice","id","type","includes","placeholder","onChange","onClick","_c","$RefreshReg$"],"sources":["C:/Development/2afa701e-016e-4a7b-8361-9c7702a04020/src/MainForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nexport default function Form() {\r\n    const [formData, setFormData] = useState({\r\n        username: '',\r\n        email: '',\r\n        password: '',\r\n        reenter_password: '',\r\n    });\r\n    const [response, setResponse] = useState(null); // Store server response status or messages\r\n\r\n    const handleChange = (event) => {\r\n        const { name, value } = event.target;\r\n        setFormData((prevState) => ({\r\n            ...prevState,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        try {\r\n            if (formData.password !== formData.reenter_password) {\r\n                console.log('Passwords do not match');\r\n                setResponse('Passwords do not match');\r\n                return;\r\n            }\r\n            else if (formData.password.length < 8) {\r\n                setResponse('Password must be at least 8 characters long');\r\n                return;\r\n            }\r\n\r\n            // Remove reenter_password key from formData before sending the data\r\n            const { reenter_password, ...requestData } = formData;\r\n            console.log(requestData);\r\n\r\n            const response = await fetch('http://localhost:8000/api/register/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(requestData),\r\n            });\r\n            console.log(response);\r\n            if (response.status === 201) {\r\n                const data = await response.json(); // Parse the server response if needed\r\n                setResponse('Registration successful!');\r\n                console.log('Success:', data);\r\n            } else {\r\n                const errorData = await response.json();\r\n                setResponse(`Failed: ${errorData.message || 'Unknown error'}`);\r\n                console.log('Error:', errorData);\r\n            }\r\n        } catch (error) {\r\n            setResponse('Failed: Server error');\r\n            console.error('Error:', error);\r\n        }\r\n    };\r\n    const handleResrtPwdRedirect =()=>{\r\n        useHistory.push('./Resetpassword');\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>Register</h2>\r\n            <form onSubmit={handleSubmit}>\r\n                {Object.keys(formData).map((key) => (\r\n                    <div key={key}>\r\n                        <label htmlFor={key}>{key.charAt(0).toUpperCase() + key.slice(1)}</label>\r\n                        <input\r\n                            id={key}\r\n                            name={key}\r\n                            type={key.includes('password') ? 'password' : 'text'} // Use password type for password fields\r\n                            placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n                            value={formData[key]}\r\n                            onChange={handleChange}\r\n                        />\r\n                    </div>\r\n                ))}\r\n                <div>\r\n                    <button type=\"submit\">Create Account</button>\r\n                </div>\r\n            </form>\r\n\r\n            {response && <p>{response}</p>} {/* Display server or validation messages */}\r\n            <button onClick={handleResrtPwdRedirect}>Forgot password?</button>\r\n        </div>\r\n    );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}