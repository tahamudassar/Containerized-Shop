{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\2afa701e-016e-4a7b-8361-9c7702a04020\\\\src\\\\Forms.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Forms() {\n  _s();\n  const [formData, setFormData] = useState({\n    username: '',\n    email: '',\n    password: '',\n    reenter_password: ''\n  });\n  const [response, setResponse] = useState(null);\n  //   const navigate = useNavigate();\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    try {\n      if (formData.password !== formData.reenter_password) {\n        setResponse('Passwords do not match');\n        return;\n      } else if (formData.password.length < 8) {\n        setResponse('Password must be at least 8 characters long');\n        return;\n      }\n      const {\n        reenter_password,\n        ...requestData\n      } = formData;\n      const response = await fetch('http://localhost:8000/api/register/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestData)\n      });\n      if (response.status === 201) {\n        setResponse('Registration successful!');\n        // navigate('/mainForm'); // Navigate to MainForm on success\n      } else {\n        const errorData = await response.json();\n        setResponse(`Failed: ${errorData.message || 'Unknown error'}`);\n      }\n    } catch (error) {\n      setResponse('Failed: Server error');\n    }\n  };\n\n  //   const handleResetPwdRedirect = () => {\n  //     navigate('/resetpassword');\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Register\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [Object.keys(formData).map(key => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: key,\n          children: key.charAt(0).toUpperCase() + key.slice(1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: key,\n          name: key,\n          type: key.includes('password') ? 'password' : 'text',\n          placeholder: key.charAt(0).toUpperCase() + key.slice(1),\n          value: formData[key],\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, key, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), response && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 20\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(Forms, \"zPwfrUoCFhsy6QeWyVob9ljYbhk=\");\n_c = Forms;\nvar _c;\n$RefreshReg$(_c, \"Forms\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Forms","_s","formData","setFormData","username","email","password","reenter_password","response","setResponse","handleChange","event","name","value","target","prevState","handleSubmit","preventDefault","length","requestData","fetch","method","headers","body","JSON","stringify","status","errorData","json","message","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","Object","keys","map","key","htmlFor","charAt","toUpperCase","slice","id","type","includes","placeholder","onChange","_c","$RefreshReg$"],"sources":["C:/Development/2afa701e-016e-4a7b-8361-9c7702a04020/src/Forms.js"],"sourcesContent":["import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n\r\nexport default function Forms() {\r\n  const [formData, setFormData] = useState({\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    reenter_password: '',\r\n  });\r\n  const [response, setResponse] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormData((prevState) => ({\r\n      ...prevState,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      if (formData.password !== formData.reenter_password) {\r\n        setResponse('Passwords do not match');\r\n        return;\r\n      } else if (formData.password.length < 8) {\r\n        setResponse('Password must be at least 8 characters long');\r\n        return;\r\n      }\r\n\r\n      const { reenter_password, ...requestData } = formData;\r\n      const response = await fetch('http://localhost:8000/api/register/', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(requestData),\r\n      });\r\n\r\n      if (response.status === 201) {\r\n        setResponse('Registration successful!');\r\n        // navigate('/mainForm'); // Navigate to MainForm on success\r\n      } else {\r\n        const errorData = await response.json();\r\n        setResponse(`Failed: ${errorData.message || 'Unknown error'}`);\r\n      }\r\n    } catch (error) {\r\n      setResponse('Failed: Server error');\r\n    }\r\n  };\r\n\r\n//   const handleResetPwdRedirect = () => {\r\n//     navigate('/resetpassword');\r\n//   };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Register</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        {Object.keys(formData).map((key) => (\r\n          <div key={key}>\r\n            <label htmlFor={key}>\r\n              {key.charAt(0).toUpperCase() + key.slice(1)}\r\n            </label>\r\n            <input\r\n              id={key}\r\n              name={key}\r\n              type={key.includes('password') ? 'password' : 'text'}\r\n              placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n              value={formData[key]}\r\n              onChange={handleChange}\r\n            />\r\n          </div>\r\n        ))}\r\n        <div>\r\n          <button type=\"submit\">Create Account</button>\r\n        </div>\r\n      </form>\r\n      {response && <p>{response}</p>}\r\n      {/* <button onClick={handleResetPwdRedirect}>Forgot password?</button> */}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}