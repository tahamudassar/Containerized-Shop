{"ast":null,"code":"var _jsxFileName = \"C:\\\\Development\\\\2afa701e-016e-4a7b-8361-9c7702a04020\\\\src\\\\FetchUserData.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserData = () => {\n  _s();\n  // State for formData, with userID, email, and username\n  const [formData, setFormData] = useState({\n    id: '',\n    // userID (unchanged during update)\n    email: '',\n    // email (to be updated)\n    username: '' // username (to be updated)\n  });\n\n  // State to store fetched user data\n  const [user, setUser] = useState(null);\n\n  // useEffect that runs when formData.id changes\n  useEffect(() => {\n    console.log(\"this is a new render\");\n\n    // Fetch user data from API when id changes\n    const fetchUserData = async () => {\n      try {\n        const response = await fetch(`http://localhost:8000/api/user/${formData.id}/`);\n        const data = await response.json();\n\n        // Update only email and username in formData without changing userID\n        setFormData(prevData => ({\n          ...prevData,\n          // Spread the previous formData\n          email: data.email,\n          // Update email\n          username: data.username // Update username\n        }));\n        setUser(data); // Set the fetched data for display\n      } catch (error) {\n        console.error(\"Error fetching user data:\", error);\n      }\n    };\n\n    // Call fetchUserData when formData.id changes\n    if (formData.id) {\n      fetchUserData(); // Fetch user data\n    }\n  }, [formData.id]); // Dependency array makes it run when formData.id changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"User Information\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"UserID: \", formData.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Username: \", user.username]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Email: \", user.email]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading user data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setFormData({\n        ...formData,\n        id: formData.id + 1\n      }),\n      children: \"Change UserID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n_s(UserData, \"0BUNzw2h5vRQwUuMzEA06LKxEeo=\");\n_c = UserData;\nexport default FetchUserData;\nvar _c;\n$RefreshReg$(_c, \"UserData\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","UserData","_s","formData","setFormData","id","email","username","user","setUser","console","log","fetchUserData","response","fetch","data","json","prevData","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","FetchUserData","$RefreshReg$"],"sources":["C:/Development/2afa701e-016e-4a7b-8361-9c7702a04020/src/FetchUserData.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst UserData = () => {\r\n  // State for formData, with userID, email, and username\r\n  const [formData, setFormData] = useState({\r\n    id: '',       // userID (unchanged during update)\r\n    email: '',    // email (to be updated)\r\n    username: '', // username (to be updated)\r\n  });\r\n\r\n  // State to store fetched user data\r\n  const [user, setUser] = useState(null);\r\n\r\n  // useEffect that runs when formData.id changes\r\n  useEffect(() => {\r\n    console.log(\"this is a new render\");\r\n\r\n    // Fetch user data from API when id changes\r\n    const fetchUserData = async () => {\r\n      try {\r\n        const response = await fetch(`http://localhost:8000/api/user/${formData.id}/`);\r\n        const data = await response.json();\r\n\r\n        // Update only email and username in formData without changing userID\r\n        setFormData((prevData) => ({\r\n          ...prevData,            // Spread the previous formData\r\n          email: data.email,      // Update email\r\n          username: data.username // Update username\r\n        }));\r\n\r\n        setUser(data); // Set the fetched data for display\r\n      } catch (error) {\r\n        console.error(\"Error fetching user data:\", error);\r\n      }\r\n    };\r\n\r\n    // Call fetchUserData when formData.id changes\r\n    if (formData.id) {\r\n      fetchUserData(); // Fetch user data\r\n    }\r\n  }, [formData.id]); // Dependency array makes it run when formData.id changes\r\n\r\n  return (\r\n    <div>\r\n      <h1>User Information</h1>\r\n      <p>UserID: {formData.id}</p>\r\n      {user ? (\r\n        <div>\r\n          <p>Username: {user.username}</p>\r\n          <p>Email: {user.email}</p>\r\n        </div>\r\n      ) : (\r\n        <p>Loading user data...</p>\r\n      )}\r\n\r\n      {/* Button to change userID */}\r\n      <button onClick={() => setFormData({ ...formData, id: formData.id + 1 })}>\r\n        Change UserID\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FetchUserData;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}